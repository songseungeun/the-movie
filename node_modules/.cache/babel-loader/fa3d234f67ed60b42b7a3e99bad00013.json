{"ast":null,"code":"var _jsxFileName = \"/Users/songseungeun/Documents/dev/TIL/react/the-movie/src/MoviesContext.js\";\nimport React, { createContext, useReducer, useContext } from \"react\"; // import createAsyncDispatcher from \"./asyncActionUtils\";\n\nimport { movies } from \"./api\";\nconst initialState = {\n  now: {\n    loading: false,\n    data: null,\n    error: null\n  }\n};\nconst loadingState = {\n  loading: true,\n  data: null,\n  error: null\n};\n\nconst success = data => ({\n  loading: false,\n  data,\n  error: null\n});\n\nconst error = error => ({\n  loading: false,\n  data: null,\n  error: error\n}); // function moviesReducer(state, action) {\n//   switch (action.type) {\n//     case \"GET_NOW\":\n//       return {\n//         ...state,\n//         now: loadingState,\n//       };\n//     case \"GET_NOW_SUCCESS\":\n//       return {\n//         ...state,\n//         now: success(action.data),\n//       };\n//     case \"GET_NOW_ERROR\":\n//       return {\n//         ...state,\n//         now: error(action.error),\n//       };\n//     default:\n//       throw new Error(`Unhandled action type: ${action.type}`);\n//   }\n// }\n\n\nconst NowStateContext = createContext(null);\nconst NowDispatchContext = createContext(null);\nexport function NowProvider({\n  children\n}) {\n  const [state, dispatch] = useReducer(moviesReducer, initialState);\n  return /*#__PURE__*/React.createElement(NowStateContext.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NowDispatchContext.Provider, {\n    value: dispatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, children));\n}\nexport function useNowState() {\n  const state = useContext(NowStateContext);\n\n  if (!state) {\n    throw new Error(\"Cannot find Movies Provider\");\n  }\n\n  return state;\n}\nexport function useNowDispatch() {\n  const dispatch = useContext(NowDispatchContext);\n\n  if (!dispatch) {\n    throw new Error(\"Cannot find Movies Provider\");\n  }\n\n  return dispatch;\n}\nexport async function getNow(dispatch) {\n  dispatch({\n    type: \"GET_NOW\"\n  });\n\n  try {\n    const response = await movies.getNowPlaying();\n    dispatch({\n      type: \"GET_NOW_SUCCESS\",\n      data: response.data.results\n    });\n  } catch (e) {\n    dispatch({\n      type: \"GET_NOW_ERROR\",\n      error: e\n    });\n  }\n}","map":{"version":3,"sources":["/Users/songseungeun/Documents/dev/TIL/react/the-movie/src/MoviesContext.js"],"names":["React","createContext","useReducer","useContext","movies","initialState","now","loading","data","error","loadingState","success","NowStateContext","NowDispatchContext","NowProvider","children","state","dispatch","moviesReducer","useNowState","Error","useNowDispatch","getNow","type","response","getNowPlaying","results","e"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,UAA3C,QAA6D,OAA7D,C,CACA;;AACA,SAASC,MAAT,QAAuB,OAAvB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,OAAO,EAAE,KADN;AAEHC,IAAAA,IAAI,EAAE,IAFH;AAGHC,IAAAA,KAAK,EAAE;AAHJ;AADc,CAArB;AAQA,MAAMC,YAAY,GAAG;AACnBH,EAAAA,OAAO,EAAE,IADU;AAEnBC,EAAAA,IAAI,EAAE,IAFa;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;;AAMA,MAAME,OAAO,GAAIH,IAAD,KAAW;AACzBD,EAAAA,OAAO,EAAE,KADgB;AAEzBC,EAAAA,IAFyB;AAGzBC,EAAAA,KAAK,EAAE;AAHkB,CAAX,CAAhB;;AAMA,MAAMA,KAAK,GAAIA,KAAD,KAAY;AACxBF,EAAAA,OAAO,EAAE,KADe;AAExBC,EAAAA,IAAI,EAAE,IAFkB;AAGxBC,EAAAA,KAAK,EAAEA;AAHiB,CAAZ,CAAd,C,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMG,eAAe,GAAGX,aAAa,CAAC,IAAD,CAArC;AACA,MAAMY,kBAAkB,GAAGZ,aAAa,CAAC,IAAD,CAAxC;AAEA,OAAO,SAASa,WAAT,CAAqB;AAAEC,EAAAA;AAAF,CAArB,EAAmC;AACxC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBf,UAAU,CAACgB,aAAD,EAAgBb,YAAhB,CAApC;AACA,sBACE,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEW,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAEC,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,QADH,CADF,CADF;AAOD;AAED,OAAO,SAASI,WAAT,GAAuB;AAC5B,QAAMH,KAAK,GAAGb,UAAU,CAACS,eAAD,CAAxB;;AACA,MAAI,CAACI,KAAL,EAAY;AACV,UAAM,IAAII,KAAJ,CAAU,6BAAV,CAAN;AACD;;AACD,SAAOJ,KAAP;AACD;AAED,OAAO,SAASK,cAAT,GAA0B;AAC/B,QAAMJ,QAAQ,GAAGd,UAAU,CAACU,kBAAD,CAA3B;;AACA,MAAI,CAACI,QAAL,EAAe;AACb,UAAM,IAAIG,KAAJ,CAAU,6BAAV,CAAN;AACD;;AACD,SAAOH,QAAP;AACD;AAED,OAAO,eAAeK,MAAf,CAAsBL,QAAtB,EAAgC;AACrCA,EAAAA,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAR;;AACA,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMpB,MAAM,CAACqB,aAAP,EAAvB;AACAR,IAAAA,QAAQ,CAAC;AAAEM,MAAAA,IAAI,EAAE,iBAAR;AAA2Bf,MAAAA,IAAI,EAAEgB,QAAQ,CAAChB,IAAT,CAAckB;AAA/C,KAAD,CAAR;AACD,GAHD,CAGE,OAAOC,CAAP,EAAU;AACVV,IAAAA,QAAQ,CAAC;AAAEM,MAAAA,IAAI,EAAE,eAAR;AAAyBd,MAAAA,KAAK,EAAEkB;AAAhC,KAAD,CAAR;AACD;AACF","sourcesContent":["import React, { createContext, useReducer, useContext } from \"react\";\n// import createAsyncDispatcher from \"./asyncActionUtils\";\nimport { movies } from \"./api\";\n\nconst initialState = {\n  now: {\n    loading: false,\n    data: null,\n    error: null,\n  },\n};\n\nconst loadingState = {\n  loading: true,\n  data: null,\n  error: null,\n};\n\nconst success = (data) => ({\n  loading: false,\n  data,\n  error: null,\n});\n\nconst error = (error) => ({\n  loading: false,\n  data: null,\n  error: error,\n});\n\n// function moviesReducer(state, action) {\n//   switch (action.type) {\n//     case \"GET_NOW\":\n//       return {\n//         ...state,\n//         now: loadingState,\n//       };\n//     case \"GET_NOW_SUCCESS\":\n//       return {\n//         ...state,\n//         now: success(action.data),\n//       };\n//     case \"GET_NOW_ERROR\":\n//       return {\n//         ...state,\n//         now: error(action.error),\n//       };\n//     default:\n//       throw new Error(`Unhandled action type: ${action.type}`);\n//   }\n// }\n\nconst NowStateContext = createContext(null);\nconst NowDispatchContext = createContext(null);\n\nexport function NowProvider({ children }) {\n  const [state, dispatch] = useReducer(moviesReducer, initialState);\n  return (\n    <NowStateContext.Provider value={state}>\n      <NowDispatchContext.Provider value={dispatch}>\n        {children}\n      </NowDispatchContext.Provider>\n    </NowStateContext.Provider>\n  );\n}\n\nexport function useNowState() {\n  const state = useContext(NowStateContext);\n  if (!state) {\n    throw new Error(\"Cannot find Movies Provider\");\n  }\n  return state;\n}\n\nexport function useNowDispatch() {\n  const dispatch = useContext(NowDispatchContext);\n  if (!dispatch) {\n    throw new Error(\"Cannot find Movies Provider\");\n  }\n  return dispatch;\n}\n\nexport async function getNow(dispatch) {\n  dispatch({ type: \"GET_NOW\" });\n  try {\n    const response = await movies.getNowPlaying();\n    dispatch({ type: \"GET_NOW_SUCCESS\", data: response.data.results });\n  } catch (e) {\n    dispatch({ type: \"GET_NOW_ERROR\", error: e });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}